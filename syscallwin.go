// Code generated by 'go generate'; DO NOT EDIT.

package main

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modadvapi32       = windows.NewLazySystemDLL("advapi32.dll")
	modkernel32       = windows.NewLazySystemDLL("kernel32.dll")
	modminidumpapiset = windows.NewLazySystemDLL("minidumpapiset.dll")
	modpsapi          = windows.NewLazySystemDLL("psapi.dll")

	procSetEntriesInAclW         = modadvapi32.NewProc("SetEntriesInAclW")
	procDeviceIoControl          = modkernel32.NewProc("DeviceIoControl")
	procMiniDumpWriteDump        = modminidumpapiset.NewProc("MiniDumpWriteDump")
	procEnumDeviceDrivers        = modpsapi.NewProc("EnumDeviceDrivers")
	procGetDeviceDriverBaseNameW = modpsapi.NewProc("GetDeviceDriverBaseNameW")
)

func SetEntriesInAclW(cCountOfExplicitEntries uint32, pListOfExplicitEntries *windows.EXPLICIT_ACCESS, OldAcl *windows.ACL, NewAcl **windows.ACL) (ret uint32) {
	r0, _, _ := syscall.Syscall6(procSetEntriesInAclW.Addr(), 4, uintptr(cCountOfExplicitEntries), uintptr(unsafe.Pointer(pListOfExplicitEntries)), uintptr(unsafe.Pointer(OldAcl)), uintptr(unsafe.Pointer(NewAcl)), 0, 0)
	ret = uint32(r0)
	return
}

func DeviceIoControl(hDevice uintptr, dwIoControlCode uint32, lpInBuffer uintptr, nInBufferSize uint32, lpOutBuffer uintptr, nOutBufferSize uint32, lpBytesReturned *uint32) (ret bool) {
	r0, _, _ := syscall.Syscall9(procDeviceIoControl.Addr(), 7, uintptr(hDevice), uintptr(dwIoControlCode), uintptr(lpInBuffer), uintptr(nInBufferSize), uintptr(lpOutBuffer), uintptr(nOutBufferSize), uintptr(unsafe.Pointer(lpBytesReturned)), 0, 0)
	ret = r0 != 0
	return
}

func MiniDumpWriteDump(handle windows.Handle, ProcessId uint32, hFile windows.Handle, dumpType uint32, exceptionParam unsafe.Pointer, userStreamParam unsafe.Pointer, callbackParam unsafe.Pointer) (ret bool) {
	r0, _, _ := syscall.Syscall9(procMiniDumpWriteDump.Addr(), 7, uintptr(handle), uintptr(ProcessId), uintptr(hFile), uintptr(dumpType), uintptr(exceptionParam), uintptr(userStreamParam), uintptr(callbackParam), 0, 0)
	ret = r0 != 0
	return
}

func EnumDeviceDrivers(lpImageBase uintptr, cb uint32, lpcbNeeded *uint32) (ret bool) {
	r0, _, _ := syscall.Syscall(procEnumDeviceDrivers.Addr(), 3, uintptr(lpImageBase), uintptr(cb), uintptr(unsafe.Pointer(lpcbNeeded)))
	ret = r0 != 0
	return
}

func GetDeviceDriverBaseNameW(lpImageBase uintptr, lpBaseName uintptr, nSize uint32) (ret uint32, err error) {
	r0, _, e1 := syscall.Syscall(procGetDeviceDriverBaseNameW.Addr(), 3, uintptr(lpImageBase), uintptr(lpBaseName), uintptr(nSize))
	ret = uint32(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}
